datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Campaign {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        String // EMAIL or SMS
  status      String // DRAFT, SCHEDULED, IN_PROGRESS, COMPLETED, FAILED
  userId      String             @db.ObjectId
  user        User               @relation(fields: [userId], references: [id])
  segment     Segment?           @relation(fields: [segmentId], references: [id])
  segmentId   String?            @db.ObjectId
  message     Message            @relation(fields: [messageId], references: [id])
  messageId   String             @db.ObjectId
  schedule    DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  logs        CommunicationLog[]
}

model Segment {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  criteria    Json
  campaigns   Campaign[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Message {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  subject   String?
  body      String
  template  String?
  variables Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
}

model CommunicationLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId String   @db.ObjectId
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  recipient  String
  status     String // SENT, FAILED, PENDING
  error      String?
  metadata   Json?
  sentAt     DateTime @default(now())
}

model Template {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  subject   String?
  content   String
  variables String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreference {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  emailNotifications Boolean  @default(true)
  dailyDigest        Boolean  @default(false)
  timezone           String   @default("UTC")
  language           String   @default("en")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
